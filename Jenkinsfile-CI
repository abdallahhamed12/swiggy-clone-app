pipeline {
    agent any
    tools {
        jdk "JDK17"
        nodejs "nodejs"
    }
 
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage("Checkout from Git") {
            steps {
                git branch: 'main', url: 'https://github.com/abdallahhamed12/swiggy-clone-app.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
                sh 'npm install --save-dev jest-junit jest coverage'
            }
        }

        stage('Unit Tests') {
            steps {
                script {
                    try {
                        sh 'npm test -- --ci --coverage --reporters=default --reporters=jest-junit --outputFile=test-results/junit.xml'
                    } catch (err) {
                        echo "Tests failed: ${err}"
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('test-results/junit.xml')) {
                            junit 'test-results/junit.xml'
                            archiveArtifacts artifacts: 'test-results/junit.xml'
                        } else {
                            echo 'Warning: No test results file found'
                            writeFile file: 'test-results/junit.xml', 
                                text: '''<?xml version="1.0" encoding="UTF-8"?>
                                <testsuites name="jest tests"></testsuites>'''
                            junit 'test-results/junit.xml'
                        }
                    }
                }
            }
        }

        stage('Code Coverage') {
            steps {
                script {
                    // Generate coverage report
                    sh 'npm run test:coverage || echo "Coverage generation completed"'
                    
                    // Install required Jenkins plugins if not already installed
                    sh '''
                    if [ ! -f "$JENKINS_HOME/plugins/htmlpublisher.jpi" ]; then
                        echo "Installing HTML Publisher plugin..."
                        curl -L -o "$JENKINS_HOME/plugins/htmlpublisher.jpi" \
                        "https://updates.jenkins.io/latest/htmlpublisher.jpi"
                    fi
                    '''
                }
            }
            post {
                always {
                    publishHTML(target: [
                        allowMissing: true,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'coverage/lcov-report',
                        reportFiles: 'index.html',
                        reportName: 'Code Coverage Report'
                    ])
                    archiveArtifacts artifacts: 'coverage/**/*'
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    docker.build("abdallahhamed/my-app-swiggy:latest")
                }
            }
        }
        
        stage("Trivy scan image") {
            steps {
                sh "trivy image --severity HIGH,CRITICAL abdallahhamed/my-app-swiggy:latest > trivyimage.txt"
                archiveArtifacts artifacts: 'trivyimage.txt'
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-hub-credentials', toolName: 'docker') {
                        sh "docker push abdallahhamed/my-app-swiggy:latest"
                    }
                }
            }
        }     
    }
}
